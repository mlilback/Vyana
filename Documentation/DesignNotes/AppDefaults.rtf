{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red201\green179\blue207;}
\margl1440\margr1440\vieww13760\viewh19600\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\b\fs48 \cf0 App Defaults\

\b0\fs28 \
Property Sets provide a  dynamic, inherited system of properties.\
\
When the singleton is first instantiated, it scans all open bundles for a VyanaConfig.plist file. If found, it loads a AMConfigFile object for it.\
\
Then based on rules in those files, it creates an array of AMPropertySet objects. Each set is a virtual dictionary that finds the appropriate value for each property key based on the rules defined in the config files.\
\
The application merely has to call:\
\pard\tx3200\tx6420\tx8020\pardeftab720\li360\ql\qnatural

\f1\fs24 \cf0 \cb2 [[AMAppDefaults sharedInstance] objectForKey:@"propertyName"]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \cb1 to use load the correct properties.\
\
At the bottom is a sample VyanaConfig.plist that gives a basic idea of how things work. I'll fill in more details as time progresses.\
\

\b\fs36 Loading Precedence\

\b0\fs28 \
The main bundle config file has priority. If there isn't one, then the order of loading is based on whatever method Apple choose to return open bundles in. Each loaded bundle/framework's file is similarily used to configure the tree underneath them.\
\
If the property LoadsChildrenFirst is true, then all chid bundle properties override the application's properties. This is false by default.\
\
The Children array lists bundle identifiers in the order they should be given precedence. Two special values are allowed. The value of "self" is where the bundle's own values are inserted so some children can load first, and others after. The value of "dynamic" is a placeholder for the precedence of bundles dynamically loaded after the AMAppDefaults singleton has been instantiated.\
\

\b\fs36 Property Sets\

\b0\fs28 \
Each property set is a dictionary with a name and a set of values. The values can be loaded from within the config file, or a separate plist file can be specified. If UserDefaultsCanOverride is true (the default is false), then NSUserDefaults will be consulted for that property under the key "PropertySetName.Property". Once it is set to true for a property set, no sets further down the hierarchy can change it.\
\

\b\fs36 Sample VyanaConfig.plist\

\b0\fs28 \

\f1\fs24 <dict>\
	<key>LoadChildrenFirst</key>\
	<false/>\
	<key>Children</key>\
	<array>\
		<string>com.agilemonks.CoreSQL.PostgreSQL</string>\
		<string>com.agilemonks.CoreSQL.MySQL</string>\
		<string>self</string>\
		<string>com.agilemonks.Vyana</string>\
		<string>dynamic</string>\
	</array>\
	<key>UnknownChildrenLoadAtHead</key>\
	<false/>\
	<key>PropertySets</key>\
	<array>\
		<dict>\
			<key>Name</key>\
			<string>Logging</string>\
			<key>UserDefaultsCanOverride</key>\
			<true/>\
			<key>Values</key>\
			<dict>\
				<key>aproperty</key>\
				<integer>4</integer>\
			</dict>\
		</dict>\
		<dict>\
			<key>Name</key>\
			<string>Preferences</string>\
			<key>UserDefaultsCanOverride</key>\
			<true/>\
			<key>Values</key>\
			<string>DefaultDefaults.plist</string>\
		</dict>\
	</array>\
</dict>\
}